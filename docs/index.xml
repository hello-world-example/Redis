<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Redis</title>
    <link>https://hello-world-example.github.io/Redis/</link>
    <description>Recent content in Introduction on Redis</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/_sidebar/</guid>
      <description> Client  Jedis Pool Lettuce  监控  INFO Redis Manager 监控指标 SLOWLOG  管理
 CONFIG  常见问题
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Admin/CONFIG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Admin/CONFIG/</guid>
      <description> CONFIG </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Client/Jedis-Pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Client/Jedis-Pool/</guid>
      <description>Jedis 链接池 Jedis 使用阻塞的 I/O，且其方法调用都是同步的，程序需要等到 Sockets 处理完 I/O 才能执行，不支持异步。
实例不是线程安全的，所以需要通过连接池来使用 Jedis。
连接池配置示例  官方文档 Getting-started
 JedisPoolConfig jedisPoolConfig = new JedisPoolConfig(); // 0 jedisPoolConfig.setMinIdle(JedisPoolConfig.DEFAULT_MIN_IDLE); // 8 jedisPoolConfig.setMaxIdle(JedisPoolConfig.DEFAULT_MAX_IDLE); // 8 jedisPoolConfig.setMaxTotal(JedisPoolConfig.DEFAULT_MAX_TOTAL); // -1 jedisPoolConfig.setMaxWaitMillis(JedisPoolConfig.DEFAULT_MAX_WAIT_MILLIS); // 1000L * 60L * 30L jedisPoolConfig.setMinEvictableIdleTimeMillis(JedisPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS); // 3 jedisPoolConfig.setNumTestsPerEvictionRun(JedisPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN); // -1 jedisPoolConfig.setSoftMinEvictableIdleTimeMillis(JedisPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS); // true jedisPoolConfig.setBlockWhenExhausted(JedisPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED); // 10_000 jedisPoolConfig.setEvictorShutdownTimeoutMillis(JedisPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS); // false jedisPoolConfig.setFairness(JedisPoolConfig.DEFAULT_FAIRNESS); // false jedisPoolConfig.setTestOnCreate(JedisPoolConfig.DEFAULT_TEST_ON_CREATE); // false jedisPoolConfig.setTestOnBorrow(JedisPoolConfig.DEFAULT_TEST_ON_BORROW); // false jedisPoolConfig.setTestWhileIdle(JedisPoolConfig.DEFAULT_TEST_WHILE_IDLE); // false jedisPoolConfig.setTestOnReturn(JedisPoolConfig.DEFAULT_TEST_ON_RETURN); new JedisPool(jedisPoolConfig, host, Protocol.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Client/Lettuce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Client/Lettuce/</guid>
      <description> Lettuce </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/FAQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/FAQ/</guid>
      <description> 常见问题 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Monitor/INFO/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Monitor/INFO/</guid>
      <description>INFO 命令  server: Redis服务器的一般信息 clients: 客户端的连接部分 memory: 内存消耗相关信息 persistence: RDB 和 AOF 相关信息 stats: 一般统计 replication: 主/从复制信息 cpu: 统计CPU的消耗 commandstats: Redis命令统计 cluster: Redis集群信息 keyspace: 数据库的相关统计  Server ✔️    指标 描述 参考值     redis_version 版本 5.0.4   redis_build_id 构建 ID 2325020596d7902e   redis_mode 服务器模式 standalone、 sentinel、 cluster   os Redis 服务器的宿主操作系统    arch_bits 架构（32 或 64 位） 64   multiplexing_api Redis 使用的事件循环机制 epoll   atomicvar_api Redis 使用的 Atomicvar API atomic-builtin   gcc_version 编译 Redis 时所使用的 GCC 版本    process_id 进程的 PID    run_id 标识Redis服务器的随机值（将由Sentinel和Cluster使用） cff1f.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Monitor/Redis-Manager-Metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Monitor/Redis-Manager-Metrics/</guid>
      <description>Redis Manager 监控指标  https://github.com/ngbdf/redis-manager
@see: com.newegg.ec.redis.entity.NodeInfo
    指标 描述 来源     expires Key 的个数    keys 有过期时间的 Key 的个数    blocked_clients 正在等待阻塞命令的客户端的数量
（BLPOP、BRPOP、BRPOPLPUSH） INFO clients
blocked_clients   connected_clients 已连接客户端的数量 INFO clients
connected_clients   [Bug] commands_processed 处理的命令数 INFO Stats
total_commands_processed   [Bug] connections_received 创建连接个数，如果新创建连接过多，过度地创建和销毁连接对性能有影响，说明短连接严重或连接池使用有问题，需调研代码的连接设置 INFO Stats
total_connections_received   instantaneous_ops_per_sec 每秒处理的命令数 INFO Stats
instantaneous_ops_per_sec   [Bug] keyspace_hits_ratio 命中率</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Redis/docs/Monitor/SLOWLOG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Redis/docs/Monitor/SLOWLOG/</guid>
      <description>SlowLog 慢查日志 获取 SlowLog 配置 &amp;gt; CONFIG GET slowlog* 1) &amp;#34;slowlog-log-slower-than&amp;#34; 2) &amp;#34;10000&amp;#34; 3) &amp;#34;slowlog-max-len&amp;#34; 4) &amp;#34;128&amp;#34; 设置 SlowLog 配置 &amp;gt; CONFIG SET slowlog-max-len 256 OK slowlog-log-slower-than Redis 命令的执行分为以下 步骤 发送、排队、执行、返回 ，slowlog 只统计 执行 阶段是时间，没有慢查询并不代表客户端没有超时。
 slowlog-log-slower-than 的单位是 微妙（1秒=1000000微秒），默认值 10000 = 10ms  CONFIG SET slowlog-log-slower-than 0 记录所有日志 CONFIG SET slowlog-log-slower-than -1 关闭慢查  slowlog-max-len 慢查日志保存的队列长度，是个 FIFO 队列  获取慢查日志 # 获取2条慢查日志 &amp;gt; SLOWLOG GET 2 1) 1) (integer) 2544 # 唯一ID 2) (integer) 1575910861 # 查询的时间戳 3) (integer) 14919 # 查询耗时，微妙，即 14毫秒 4) 1) &amp;#34;SETBIT&amp;#34;	# 执行的命令	2) &amp;#34;test:key1&amp;#34; # 命令参数 3) &amp;#34;42753506&amp;#34; 4) &amp;#34;1&amp;#34; 5) &amp;#34;172.</description>
    </item>
    
  </channel>
</rss>